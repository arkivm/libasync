# Process this file with autoconf to produce a configure script.

AC_PREREQ([2.68])
AC_INIT([libasync], [0.1])
AC_CONFIG_SRCDIR([src/common/thc.c])
AC_CONFIG_AUX_DIR(autoconf)
AC_CONFIG_HEADERS([config.h])

LT_INIT
AC_CONFIG_MACRO_DIR([m4])
AM_INIT_AUTOMAKE([subdir-objects foreign])

# --------------------------------------------------
# libasync features, packages, and config
# --------------------------------------------------

# Build kernel tests?
AC_ARG_ENABLE([kernel_tests_build],
    [AS_HELP_STRING([--enable-kernel-tests-build],
        [Enable building kernel test modules (default=no)])],
        [],
        [enable_kernel_tests_build="no"])
AM_CONDITIONAL(ENABLE_KERNEL_TESTS_BUILD, 
    [test "x$enable_kernel_tests_build" = "xyes"])
AM_COND_IF([ENABLE_KERNEL_TESTS_BUILD],
    [AC_MSG_NOTICE([Building kernel tests.])],
    [AC_MSG_NOTICE([Not building kernel tests.])])

# Lazy or Eager?
AC_ARG_ENABLE([eager],
    [AS_HELP_STRING([--enable-eager]),
        [Enable building libasync for eager stack allocation])],
        [],
        [enable_eager="no"])
AS_IF([test "x$enable_eager" = "xyes"],
    [
        EAGER_OR_LAZY=""
        AC_MSG_NOTICE([Building for EAGER stack allocation.])
    ],
    [
        EAGER_OR_LAZY="-DCONFIG_LAZY_THC"
        AC_MSG_NOTICE([Building for LAZY stack allocation.])
    ])
AC_SUBST(EAGER_OR_LAZY)

# --------------------------------------------------
# Checks for programs.
# --------------------------------------------------

AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX
AC_PROG_LIBTOOL
AC_PROG_LN_S
AC_PROG_MKDIR_P
AC_PROG_INSTALL

# --------------------------------------------------
# Checks for libraries.
# --------------------------------------------------

# libfipc
AC_ARG_WITH([libfipc],
            [AS_HELP_STRING([--with-libfipc=DIRECTORY],
                [find libfipc install in DIRECTORY (headers in include/, libfipc.a in lib/])],
            [LIBFIPC_DIR="$with_libfipc"])

AS_IF([test "x$LIBFIPC_DIR" = "x"],
        [AC_MSG_ERROR([libfipc (--with-libfipc) is required])])

AC_CHECK_FILE($LIBFIPC_DIR/include/libfipc.h,
            [AC_MSG_NOTICE([Found libfipc.h in $LIBFIPC_DIR/include])],
            [AC_MSG_ERROR([Could not find libfipc.h in $LIBFIPC_DIR/include!])])

AC_SUBST(LIBFIPC_DIR)

KDIR=/lib/modules/`uname -r`/build # default location of build system

AC_ARG_WITH([kernel-headers],
    [AS_HELP_STRING([--with-kernel-headers=DIRECTORY],
        [find Linux kernel build stuff in DIRECTORY])],
    [KDIR="$with_kernel_headers"])

# Sanity check it (in the future, we could maybe check the
# kernel version in the top of the kernel Makefile)
AC_CHECK_FILE($KDIR/Makefile,
    [AC_MSG_NOTICE([Found kernel Makefile in $KDIR])],
    [AC_MSG_ERROR([Could not find kernel Makefile in $KDIR!])])

AC_SUBST(KDIR)

# --------------------------------------------------
# Checks for types
# --------------------------------------------------

# --------------------------------------------------
# Checks for structures
# --------------------------------------------------

# --------------------------------------------------
# Checks for compiler characteristics
# --------------------------------------------------

# --------------------------------------------------
# Checks for library functions.
# --------------------------------------------------

# --------------------------------------------------
# Misc
# --------------------------------------------------

# I can't remember if there is a standard way to do this
ASYNC_AUTOCONF_NOTICE="This file was autogenerated by configure."
AC_SUBST(ASYNC_AUTOCONF_NOTICE)

# --------------------------------------------------
# Config files
# --------------------------------------------------

AC_CONFIG_FILES(
  Makefile

  src/Makefile
  src/Kbuild

  src/common/Makefile
  src/include/Makefile
  
  src/tests/Kbuild
  src/tests/Makefile
  src/tests/simple/Kbuild

  src/tests/dispatch/Kbuild
  src/tests/ctx-switch/Kbuild
  src/tests/async-msg-benchmarks/Kbuild
  src/tests/abort/Kbuild
  src/tests/create-tear-down/Kbuild
)
AC_OUTPUT

